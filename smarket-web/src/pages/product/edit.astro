---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Edit Product">
  <div class="max-w-2xl mx-auto px-4 py-6">
    <div id="editContent" class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <!-- Content will be loaded client-side -->
      <div class="text-center py-8">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto"></div>
        <p class="mt-4 text-gray-500">Loading product...</p>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Constants
  const STORAGE_KEY = 'smarket_products';
  
  // Auto-categorize function
  function categorizeProduct(productName) {
    const lowercased = productName.toLowerCase().trim();
    
    const categoryMappings = {
      'Beverages': ["milk", "juice", "water", "coffee", "tea", "soda", "beer", "wine", "drink", "beverage", "cola", "latte", "smoothie", "coconut water", "sparkling", "bottle"],
      'Food': ["bread", "rice", "pasta", "meat", "egg", "cheese", "fruit", "vegetable", "food", "chicken", "beef", "fish", "cereal", "flour", "sugar", "salt", "oil", "butter", "yogurt", "apple", "banana", "tomato", "onion", "potato", "nuts", "beans", "honey", "sauce"],
      'Household': ["toilet", "paper", "towel", "battery", "bulb", "tissue", "napkin", "candle", "lightbulb", "foil", "wrap", "bag", "garbage", "trash"],
      'Personal Care': ["shampoo", "soap", "toothpaste", "deodorant", "lotion", "conditioner", "body wash", "moisturizer", "sunscreen", "toothbrush", "razor", "makeup", "perfume", "nail"],
      'Health': ["vitamin", "medicine", "pill", "tablet", "supplement", "aspirin", "bandage", "first aid", "thermometer", "prescription"],
      'Pet Supplies': ["dog", "cat", "pet", "puppy", "kitten", "leash", "collar", "litter", "cage", "carrier", "treats", "paw"],
      'Cleaning': ["clean", "detergent", "bleach", "disinfectant", "sanitizer", "wipes", "scrub", "mop", "vacuum", "polish", "laundry", "fabric softener"]
    };
    
    for (const [category, keywords] of Object.entries(categoryMappings)) {
      if (keywords.some(keyword => lowercased.includes(keyword))) {
        return category;
      }
    }
    
    return 'Other';
  }
  
  // Get product from localStorage
  function getProduct(id) {
    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      if (!stored) return null;
      
      const products = JSON.parse(stored);
      return products.find(p => p.id === id) || null;
    } catch {
      return null;
    }
  }
  
  // Load product data and render form
  function loadProduct() {
    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('id');
    
    if (!productId) {
      document.getElementById('editContent').innerHTML = `
        <div class="text-center py-8">
          <p class="text-red-600">No product ID provided</p>
          <a href="/" class="mt-4 inline-block text-blue-600 hover:text-blue-700">Back to Products</a>
        </div>
      `;
      return;
    }
    
    const product = getProduct(productId);
    
    if (!product) {
      document.getElementById('editContent').innerHTML = `
        <div class="text-center py-8">
          <p class="text-red-600">Product not found</p>
          <a href="/" class="mt-4 inline-block text-blue-600 hover:text-blue-700">Back to Products</a>
        </div>
      `;
      return;
    }
    
    // Format date for input
    const formattedDate = new Date(product.lastPurchasedAt).toISOString().split('T')[0];
    
    document.getElementById('editContent').innerHTML = `
      <h2 class="text-2xl font-bold mb-6">Edit Product</h2>
      
      <form id="productForm" class="space-y-4">
        <input type="hidden" id="productId" value="${product.id}" />
        
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
            Product Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            value="${product.name}"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="e.g., Milk, Bread, Shampoo"
          />
        </div>
        
        <div>
          <label for="price" class="block text-sm font-medium text-gray-700 mb-1">
            Price
          </label>
          <input
            type="number"
            id="price"
            name="price"
            required
            min="0"
            step="0.01"
            value="${product.priceLatest}"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="0.00"
          />
        </div>
        
        <div>
          <label for="lastsDays" class="block text-sm font-medium text-gray-700 mb-1">
            Lasts for (days)
          </label>
          <input
            type="number"
            id="lastsDays"
            name="lastsDays"
            required
            min="1"
            value="${product.lastsDays}"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <p class="text-sm text-gray-500 mt-1">How many days until you need to buy it again</p>
        </div>
        
        <div>
          <label for="lastPurchasedAt" class="block text-sm font-medium text-gray-700 mb-1">
            Last Purchased
          </label>
          <input
            type="date"
            id="lastPurchasedAt"
            name="lastPurchasedAt"
            required
            value="${formattedDate}"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">
            Notes (optional)
          </label>
          <textarea
            id="notes"
            name="notes"
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Any additional notes..."
          >${product.notes || ''}</textarea>
        </div>
        
        <div class="flex gap-3 pt-4">
          <button
            type="submit"
            class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Save Changes
          </button>
          <button
            type="button"
            id="deleteBtn"
            class="bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 transition-colors"
          >
            Delete
          </button>
          <a
            href="/"
            class="flex-1 bg-gray-100 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-200 transition-colors text-center"
          >
            Cancel
          </a>
        </div>
      </form>
    `;
    
    // Set up event listeners
    setupEventListeners();
  }
  
  function setupEventListeners() {
    const form = document.getElementById('productForm');
    const deleteBtn = document.getElementById('deleteBtn');
    const productId = document.getElementById('productId').value;
    
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const name = formData.get('name');
      const price = parseFloat(formData.get('price'));
      const lastsDays = parseInt(formData.get('lastsDays'));
      const lastPurchasedAt = new Date(formData.get('lastPurchasedAt'));
      const notes = formData.get('notes');
      
      // Auto-categorize the product
      const category = categorizeProduct(name);
      
      // Get all products
      try {
        const stored = localStorage.getItem(STORAGE_KEY);
        if (!stored) return;
        
        const products = JSON.parse(stored);
        const index = products.findIndex(p => p.id === productId);
        
        if (index !== -1) {
          // Update product
          products[index] = {
            ...products[index],
            name,
            priceLatest: price,
            lastsDays,
            lastPurchasedAt: lastPurchasedAt.toISOString(),
            notes: notes || undefined,
            category
          };
          
          // Save to localStorage
          localStorage.setItem(STORAGE_KEY, JSON.stringify(products));
          
          // Redirect to products list
          window.location.href = '/';
        }
      } catch (e) {
        console.error('Error updating product:', e);
        alert('Error updating product');
      }
    });
    
    // Handle delete
    deleteBtn.addEventListener('click', () => {
      if (confirm('Are you sure you want to delete this product?')) {
        try {
          const stored = localStorage.getItem(STORAGE_KEY);
          if (!stored) return;
          
          const products = JSON.parse(stored);
          const filtered = products.filter(p => p.id !== productId);
          
          localStorage.setItem(STORAGE_KEY, JSON.stringify(filtered));
          window.location.href = '/';
        } catch (e) {
          console.error('Error deleting product:', e);
          alert('Error deleting product');
        }
      }
    });
  }
  
  // Load product when page loads
  document.addEventListener('DOMContentLoaded', loadProduct);
</script>