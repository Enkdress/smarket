---
import Layout from '../layouts/Layout.astro';
import { StorageService } from '../lib/storage';
import { formatCurrency, getMonthlyCostEstimate } from '../lib/utils';

// Get data
const products = StorageService.getProducts();
const settings = StorageService.getSettings();

// Calculate monthly estimate
const totalMonthly = products.reduce((sum, product) => sum + getMonthlyCostEstimate(product), 0);

// Budget calculations
const budgetPercentage = settings.budgetEnabled && settings.budgetAmount > 0
  ? Math.min(100, Math.round((totalMonthly / settings.budgetAmount) * 100))
  : 0;
const budgetRemaining = settings.budgetAmount - totalMonthly;
const isOverBudget = totalMonthly > settings.budgetAmount;
---

<Layout title="Insights">
  <div class="max-w-4xl mx-auto px-4 py-6">
    <!-- Monthly Estimate Card -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
      <h3 class="text-lg font-semibold mb-4">Monthly Estimate</h3>
      <div class="text-4xl font-bold text-gray-900 mb-4">
        {formatCurrency(totalMonthly, settings.currency)}
      </div>
      
      {settings.budgetEnabled && settings.budgetAmount > 0 && (
        <div class="space-y-3">
          <div class="relative">
            <div class="flex justify-between text-sm text-gray-600 mb-1">
              <span>Budget progress</span>
              <span>{budgetPercentage}%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
              <div
                class={`h-full transition-all duration-300 ${isOverBudget ? 'bg-orange-500' : 'bg-green-500'}`}
                style={`width: ${budgetPercentage}%`}
              ></div>
            </div>
          </div>
        </div>
      )}
    </div>
    
    <!-- Budget Status Card -->
    {settings.budgetEnabled && (
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
        <h3 class="text-lg font-semibold mb-4">Budget</h3>
        
        <div class="space-y-3">
          <div class="flex justify-between items-center">
            <span class="text-gray-600">Budget</span>
            <span class="font-semibold">{formatCurrency(settings.budgetAmount, settings.currency)}</span>
          </div>
          
          <div class="pt-3 border-t">
            {isOverBudget ? (
              <div class="flex items-start gap-3">
                <svg class="w-5 h-5 text-orange-500 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <div>
                  <p class="text-orange-700 font-medium">Estimated spend meets or exceeds your budget</p>
                  <p class="text-sm text-gray-600 mt-1">
                    Over budget by {formatCurrency(Math.abs(budgetRemaining), settings.currency)}
                  </p>
                </div>
              </div>
            ) : (
              <div class="flex items-start gap-3">
                <svg class="w-5 h-5 text-green-500 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div>
                  <p class="text-green-700 font-medium">You're within budget</p>
                  <p class="text-sm text-gray-600 mt-1">
                    {formatCurrency(budgetRemaining, settings.currency)} remaining
                  </p>
                </div>
              </div>
            )}
          </div>
          
          <div class="pt-3">
            <a
              href="/settings"
              class="text-blue-600 hover:text-blue-700 text-sm font-medium"
            >
              Adjust budget in Settings â†’
            </a>
          </div>
        </div>
      </div>
    )}
    
    <!-- Category Breakdown -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h3 class="text-lg font-semibold mb-4">Spending by Category</h3>
      
      {(() => {
        // Calculate spending by category
        const categorySpending: any = {};
        products.forEach(product => {
          const category = product.category;
          const monthly = getMonthlyCostEstimate(product);
          categorySpending[category] = (categorySpending[category] || 0) + monthly;
        });
        
        // Sort by spending amount
        const sortedCategories = Object.entries(categorySpending)
          .sort(([, a], [, b]) => (b as number) - (a as number));
        
        if (sortedCategories.length === 0) {
          return (
            <p class="text-gray-500 text-center py-4">
              No products to analyze
            </p>
          );
        }
        
        return (
          <div class="space-y-3">
            {sortedCategories.map(([category, amount]) => {
              const percentage = Math.round(((amount as number) / totalMonthly) * 100);
              return (
                <div>
                  <div class="flex justify-between items-center mb-1">
                    <span class="text-sm font-medium text-gray-700">{category}</span>
                    <span class="text-sm text-gray-600">
                      {formatCurrency(amount as number, settings.currency)} ({percentage}%)
                    </span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-2">
                    <div
                      class="bg-blue-500 h-2 rounded-full transition-all duration-300"
                      style={`width: ${percentage}%`}
                    ></div>
                  </div>
                </div>
              );
            })}
          </div>
        );
      })()}
    </div>
  </div>
</Layout>
